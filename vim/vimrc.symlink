set nocompatible                " choose no compatibility with legacy vi
filetype off

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

 " let Vundle manage Vundle
 "  " required! 
Bundle 'gmarik/vundle'

Bundle 'tpope/vim-rails.git'
Bundle 'tpope/vim-commentary.git'
Bundle 'tpope/vim-repeat.git'
Bundle 'tpope/vim-surround.git'
Bundle 'tpope/vim-fugitive'
Bundle 'mileszs/ack.vim'
Bundle 'kien/ctrlp.vim'
Bundle 'kchmck/vim-coffee-script'
Bundle 'godlygeek/tabular'
Bundle 'flazz/vim-colorschemes'
Bundle 'ecomba/vim-ruby-refactoring'
Bundle 'Valloric/YouCompleteMe'
Bundle 'SirVer/ultisnips'

set encoding=utf-8
set showcmd                     " display incomplete commands
syntax enable
filetype plugin indent on       " load file type plugins + indentation
set number                      " show line numbers
set guifont=Inconsolata:h16
"" Whitespace
set nowrap                      " don't wrap lines
set tabstop=2 shiftwidth=2      " a tab is two spaces (or set this to 4)
set expandtab                   " use spaces, not tabs (optional)
set backspace=indent,eol,start  " backspace through everything in insert mode
set autoindent
set smartindent

"" Searching
set hlsearch                    " highlight matches
set incsearch                   " incremental searching
set ignorecase                  " searches are case insensitive...
set smartcase                   " ... unless they contain at least one capital letter

" Remap open file in new tab keys
let g:ctrlp_prompt_mappings = {
  \ 'AccepSelection("e")': ['<cr>'],
  \ 'AccepSelection("h")': ['<c-x>'],
  \ 'AccepSelection("v")': ['<c-v>'],
  \ 'AccepSelection("t")': ['<c-t>'],
  \}

"Theme
set t_Co=256
color jellybeans

" MAPPINGS
" use comma as <Leader> key instead of backslash
let mapleader=","
" go to last file
nnoremap <leader><leader> <c-^>
" exit insert mode
imap jj <Esc>

" double percentage sign in command mode is expanded
" to directory of current file - http://vimcasts.org/e/14
cnoremap %% <C-R>=expand('%:h').'/'<cr>

" easier navigation between split windows
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

vmap <Leader>bb :!bundle install
vmap <Leader>bi :source ~/.vimrc<cr>:BundleInstall

map <Leader>vc :RVcontroller<cr>
map <Leader>vm :RVmodel<cr>
map <Leader>vv :RVview<cr>

" Ultisnip and YouCompleteMe
let g:ycm_key_list_previous_completion=['<Up>']
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsListSnippets="<c-k>"

"""""""""""""""""""""""""""TABULARIZE"""""""""""""""""""""""""""""""""""""""""
nmap <Leader>a= :Tabularize /=<CR>
vmap <Leader>a= :Tabularize /=<CR>
nmap <Leader>a: :Tabularize /:\zs<CR>
vmap <Leader>a: :Tabularize /:\zs<CR>
nmap <leader>a> :Tabularize /=><cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Ruby Refactor
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
:nnoremap <leader>rap  :RAddParameter<cr>
:nnoremap <leader>rcpc :RConvertPostConditional<cr>
:nnoremap <leader>rel  :RExtractLet<cr>
:vnoremap <leader>rec  :RExtractConstant<cr>
:vnoremap <leader>relv :RExtractLocalVariable<cr>
:nnoremap <leader>rit  :RInlineTemp<cr>
:vnoremap <leader>rrlv :RRenameLocalVariable<cr>
:vnoremap <leader>rriv :RRenameInstanceVariable<cr>
:vnoremap <leader>rem  :RExtractMethod<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Typos
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
:command WQ wq
:command Wq wq
:command W w
:command Q q

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Test-running stuff
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

map <Leader>t :w<cr>:call RunCurrentTest()<CR>
map <Leader>s :call RunCurrentLineInTest()<CR>

function! RunCurrentTest()
  let in_test_file = match(expand("%"), '\(.feature\|_spec.rb\|_test.rb\)$') != -1
  if in_test_file
    call SetTestFile()

    if match(expand('%'), '\.feature$') != -1
      call SetTestRunner("!cucumber")
      exec g:bjo_test_runner g:bjo_test_file
    elseif match(expand('%'), '_spec\.rb$') != -1
      call SetTestRunner("!bin/rspec")
      exec g:bjo_test_runner g:bjo_test_file
    else
      call SetTestRunner("!ruby -Itest")
      exec g:bjo_test_runner g:bjo_test_file
    endif
  else
    exec g:bjo_test_runner g:bjo_test_file
  endif
endfunction

function! SetTestRunner(runner)
  let g:bjo_test_runner=a:runner
endfunction

function! RunCurrentLineInTest()
  let in_test_file = match(expand("%"), '\(.feature\|_spec.rb\|_test.rb\)$') != -1
  if in_test_file
    call SetTestFileWithLine()
  end

  exec "!bin/rspec" g:bjo_test_file . ":" . g:bjo_test_file_line
endfunction

function! SetTestFile()
  let g:bjo_test_file=@%
endfunction

function! SetTestFileWithLine()
  let g:bjo_test_file=@%
  let g:bjo_test_file_line=line(".")
endfunction

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
