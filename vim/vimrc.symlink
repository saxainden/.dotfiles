set nocompatible                " choose no compatibility with legacy vi
filetype off

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

 " let Vundle manage Vundle
 "  " required! 
Bundle 'gmarik/vundle'

Bundle 'tpope/vim-rails.git'
Bundle 'tpope/vim-commentary.git'
Bundle 'tpope/vim-repeat.git'
Bundle 'tpope/vim-surround.git'
Bundle 'tpope/vim-fugitive'
Bundle 'rking/ag.vim'
Bundle 'kien/ctrlp.vim'
Bundle 'kchmck/vim-coffee-script'
Bundle 'godlygeek/tabular'
Bundle 'flazz/vim-colorschemes'
Bundle 'ecomba/vim-ruby-refactoring'
Bundle 'thoughtbot/vim-rspec'
Bundle 'mustache/vim-mustache-handlebars'
Bundle 'Raimondi/delimitMate'
Bundle 'hallison/vim-markdown'
Bundle 'Valloric/YouCompleteMe'
Bundle 'slim-template/vim-slim.git'
Bundle 'tpope/vim-haml'
Bundle "pangloss/vim-javascript"

set encoding=utf-8
set showcmd                     " display incomplete commands
syntax enable
filetype plugin indent on       " load file type plugins + indentation
set number                      " show line numbers
set guifont=Inconsolata:h16
"" Whitespace
set nowrap                      " don't wrap lines
set tabstop=2 shiftwidth=2      " a tab is two spaces (or set this to 4)
set expandtab                   " use spaces, not tabs (optional)
set backspace=indent,eol,start  " backspace through everything in insert mode
set autoindent
set smartindent

"" Searching
set hlsearch                    " highlight matches
set incsearch                   " incremental searching
set ignorecase                  " searches are case insensitive...
set smartcase                   " ... unless they contain at least one capital letter

"" Yank to clipboard
set clipboard=unnamed
" Remap open file in new tab keys
let g:ctrlp_prompt_mappings = {
  \ 'AccepSelection("e")': ['<cr>'],
  \ 'AccepSelection("h")': ['<c-x>'],
  \ 'AccepSelection("v")': ['<c-v>'],
  \ 'AccepSelection("t")': ['<c-t>'],
  \}

"Theme
set t_Co=256
color jellybeans

" MAPPINGS
" use comma as <Leader> key instead of backslash
let mapleader=","
" go to last file
nnoremap <leader><leader> <c-^>
" exit insert mode
imap jj <Esc>

" double percentage sign in command mode is expanded
" to directory of current file - http://vimcasts.org/e/14
cnoremap %% <C-R>=expand('%:h').'/'<cr>

" easier navigation between split windows
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

vmap <Leader>bb :!bundle install
vmap <Leader>bi :source ~/.vimrc<cr>:BundleInstall

map <Leader>vc :RVcontroller<cr>
map <Leader>vm :RVmodel<cr>
map <Leader>vv :RVview<cr>


"""""""""""""""""""""""""""TABULARIZE"""""""""""""""""""""""""""""""""""""""""
nmap <Leader>a= :Tabularize /=<CR>
vmap <Leader>a= :Tabularize /=<CR>
nmap <Leader>a: :Tabularize /:\zs<CR>
vmap <Leader>a: :Tabularize /:\zs<CR>
nmap <leader>a> :Tabularize /=><cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Ruby Refactor
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
:nnoremap <leader>rap  :RAddParameter<cr>
:nnoremap <leader>rcpc :RConvertPostConditional<cr>
:nnoremap <leader>rel  :RExtractLet<cr>
:vnoremap <leader>rec  :RExtractConstant<cr>
:vnoremap <leader>relv :RExtractLocalVariable<cr>
:nnoremap <leader>rit  :RInlineTemp<cr>
:vnoremap <leader>rrlv :RRenameLocalVariable<cr>
:vnoremap <leader>rriv :RRenameInstanceVariable<cr>
:vnoremap <leader>rem  :RExtractMethod<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Typos
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
:command WQ wq
:command Wq wq
:command W w
:command Q q

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RENAME CURRENT FILE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! RenameFile()
    let old_name = expand('%')
    let new_name = input('New file name: ', expand('%'), 'file')
    if new_name != '' && new_name != old_name
        exec ':saveas ' . new_name
        exec ':silent !rm ' . old_name
        redraw!
    endif
endfunction
map <leader>n :call RenameFile()<cr>

" Rspec.vim mappings
map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>

let g:rspec_command = "!spring rspec {spec} --color"

" Notes
map <Leader>nn :sp ~/Dropbox/notes/todo.txt<cr>

" 80 Column line
if exists('+colorcolumn')
  set colorcolumn=80
else
  au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
endif
" Use The Silver Searcher https://github.com/ggreer/the_silver_searcher
if executable('ag')
  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
endif
