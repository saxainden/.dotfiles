set nocompatible                " choose no compatibility with legacy vi
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

 " let Vundle manage Vundle
 "" required!
 ""'VundleVim/Vundle.vim'
Plugin 'gmarik/Vundle.vim' " let Vundle manage itself

Plugin 'tpope/vim-repeat.git' " repeat . macros
Plugin 'tpope/vim-surround.git'
Plugin 'tpope/vim-fugitive' " Git wrapper
Plugin 'rking/ag.vim'
Plugin 'kien/ctrlp.vim'
Plugin 'flazz/vim-colorschemes'
Plugin 'ajh17/VimCompletesMe'
Plugin 'Raimondi/delimitMate' " auto complete parens, quotes, etc.
Plugin 'scrooloose/syntastic' " syntax checker

Plugin 'davidhalter/jedi-vim' " python autocomplete
Plugin 'hallison/vim-markdown'
Plugin 'tpope/vim-haml'
Plugin 'pangloss/vim-javascript'
Plugin 'bling/vim-airline'
Plugin 'leafgarland/typescript-vim'
Plugin 'elixir-lang/vim-elixir'

call vundle#end()
filetype plugin indent on       " load file type plugins + indentation

set encoding=utf-8
set showcmd                     " display incomplete commands
syntax on
set re=1 "use old regex engine for syntax highlighing. new one is slow
set number                      " show line numbers
set guifont=Inconsolata:h16
"" Whitespace
set nowrap                      " don't wrap lines
set tabstop=2 shiftwidth=2      " a tab is two spaces (or set this to 4)
set softtabstop=2
set expandtab                   " use spaces, not tabs (optional)
set backspace=indent,eol,start  " backspace through everything in insert mode
set autoindent
set smartindent
"" Clear audio and visual error bells/flash
set vb t_vb=

"" Searching
set hlsearch                    " highlight matches
set incsearch                   " incremental searching
set ignorecase                  " searches are case insensitive...
set smartcase                   " ... unless they contain at least one capital letter

"" Vim-airline
set laststatus=2
let g:airline_powerline_fonts = 1

"" Yank to clipboard
set clipboard=unnamed

" Remap open file in new tab keys
let g:ctrlp_prompt_mappings = {
  \ 'AccepSelection("e")': ['<cr>'],
  \ 'AccepSelection("h")': ['<c-x>'],
  \ 'AccepSelection("v")': ['<c-v>'],
  \ 'AccepSelection("t")': ['<c-t>'],
  \}

"Theme
set t_Co=256
color atom-dark-256

" MAPPINGS
" use comma as <Leader> key instead of backslash
let mapleader=","
" go to last file
nnoremap <leader><leader> <c-^>
" exit insert mode
imap jj <Esc>

" double percentage sign in command mode is expanded
" to directory of current file - http://vimcasts.org/e/14
cnoremap %% <C-R>=expand('%:h').'/'<cr>

" easier navigation between split windows
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

vmap <Leader>bb :!bundle install
vmap <Leader>bi :source ~/.vimrc<cr>:BundleInstall

map <Leader>vc :RVcontroller<cr>
map <Leader>vm :RVmodel<cr>
map <Leader>vv :RVview<cr>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" TABULARIZE
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nmap <Leader>a= :Tabularize /=<CR>
vmap <Leader>a= :Tabularize /=<CR>
nmap <Leader>a: :Tabularize /:\zs<CR>
vmap <Leader>a: :Tabularize /:\zs<CR>
nmap <leader>a> :Tabularize /=><cr>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Ruby Refactor
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
:nnoremap <leader>rap  :RAddParameter<cr>
:nnoremap <leader>rcpc :RConvertPostConditional<cr>
:nnoremap <leader>rel  :RExtractLet<cr>
:vnoremap <leader>rec  :RExtractConstant<cr>
:vnoremap <leader>relv :RExtractLocalVariable<cr>
:nnoremap <leader>rit  :RInlineTemp<cr>
:vnoremap <leader>rrlv :RRenameLocalVariable<cr>
:vnoremap <leader>rriv :RRenameInstanceVariable<cr>
:vnoremap <leader>rem  :RExtractMethod<cr>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Typos
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
:command WQ wq
:command Wq wq
:command W w
:command Q q

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RENAME CURRENT FILE
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! RenameFile()
    let old_name = expand('%')
    let new_name = input('New file name: ', expand('%'), 'file')
    if new_name != '' && new_name != old_name
        exec ':saveas ' . new_name
        exec ':silent !rm ' . old_name
        redraw!
    endif
endfunction
map <leader>n :call RenameFile()<cr>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Rspec.vim mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>

let g:rspec_command = "Dispatch vagrant ssh -c 'bash -ic \"cdapp && bundle exec rspec {spec}\"'"

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Elixir Extest mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd FileType elixir map <leader>t :ExTestRunFile<CR>
autocmd FileType elixir map <leader>s :ExTestRunTest<CR>
autocmd FileType elixir map <leader>l :ExTestRunLast<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Notes
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <Leader>nn :sp ~/Dropbox/notes/todo.txt<cr>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 80 Column line
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if exists('+colorcolumn')
  set colorcolumn=80
  hi colorcolumn ctermbg=darkgray
else
  au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
endif
" Use The Silver Searcher https://github.com/ggreer/the_silver_searcher
if executable('ag')
  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = ['ag %s -l --nocolor -g ""','.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Removes trailing spaces
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! TrimWhiteSpace()
    %s/\s\+$//e
endfunction
autocmd FileWritePre    * :call TrimWhiteSpace()
autocmd FileAppendPre   * :call TrimWhiteSpace()
autocmd FilterWritePre  * :call TrimWhiteSpace()
autocmd BufWritePre     * :call TrimWhiteSpace()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vim-clojure-static special words to apply indentation to
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:clojure_fuzzy_indent_patterns = ['^with', '^def', '^let', '^fact', '^facts']

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" syntastic special words to apply indentation to
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:syntastic_mode_map={ 'mode': 'active',
                     \ 'active_filetypes': [],
                     \ 'passive_filetypes': ['html', 'js'] }
let g:syntastic_javascript_checkers = ['eslint']

let g:syntastic_ruby_mri_exec='~/.rbenv/versions/2.2.0/bin/ruby'


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Rspec syntax highlight outside of rails
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd BufRead *_spec.rb syn keyword rubyRspec describe context it specify it_should_behave_like before after setup subject its shared_examples_for shared_context let
highlight def link rubyRspec Function
