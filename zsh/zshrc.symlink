# Add paths
export PATH=/usr/local/bin:/opt/local/bin:/opt/local/sbin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/usr/local/mysql/bin:/usr/lib/php/pear:~/bin
export PATH="$PATH:/usr/local/opt/python/libexec/bin"
export PATH="$PATH:/usr/local/go/bin"
export PATH="$PATH:/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/bin"

# Go Paths and dirs
export GOPATH="${HOME}/.go"
export GOROOT="$(brew --prefix golang)/libexec"
export PATH="$PATH:${GOPATH}/bin:${GOROOT}/bin"
test -d "${GOPATH}" || mkdir "${GOPATH}"
test -d "${GOPATH}/src/github.com" || mkdir -p "${GOPATH}/src/github.com"

# Docker Timeout Fix
export DOCKER_CLIENT_TIMEOUT=120
export COMPOSE_HTTP_TIMEOUT=120

# VIM mode
# https://dougblack.io/words/zsh-vi-mode.html
bindkey -v
bindkey -M viins 'jj' vi-cmd-mode # exit with jj

# FZF through history
bindkey '^P' fh #ctrl+p to envoke func
zle -N fh{,} # create fh widget
fh() {
  print -z $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed 's/ *[0-9]* *//')
}

function zle-line-init zle-keymap-select {
    VIM_PROMPT="%{$fg_bold[green]%} [% NORMAL]%  %{$reset_color%}"
    RPS1="${${KEYMAP/vicmd/$VIM_PROMPT}/(main|viins)/} $EPS1"
    zle reset-prompt
}

zle -N zle-line-init
zle -N zle-keymap-select
export KEYTIMEOUT=20 # reduce key lag between modes

# Outputs the name of the current branch
# Usage example: git pull origin $(git_current_branch)
# Using '--quiet' with 'symbolic-ref' will not cause a fatal error (128) if
# it's not a symbolic ref, but in a Git repo.
function git_current_branch() {
  local ref
  ref=$(command git symbolic-ref --quiet HEAD 2> /dev/null)
  local ret=$?
  if [[ $ret != 0 ]]; then
    [[ $ret == 128 ]] && return  # no git repo.
    ref=$(command git rev-parse --short HEAD 2> /dev/null) || return
  fi
  echo ${ref#refs/heads/}
}

# Colorize terminal
export TERM="screen-256color"
export LSCOLORS="ExGxBxDxCxEgEdxbxgxcxd"
export GREP_OPTIONS="--color"

# Nicer history
export HISTSIZE=100000
export HISTFILE="$HOME/.history"
export SAVEHIST=$HISTSIZE

# Use vim as the editor
export EDITOR=nvim

# Use vim config for nvim
if [[ ! -a ~/.config/nvim/init.vim ]]; then
  mkdir -p ~/.config/nvim/
  echo "set runtimepath^=~/.vim runtimepath+=~/.vim/after
  let &packpath = &runtimepath
  source ~/.vimrc" > ~/.config/nvim/init.vim
fi

# Use C-x C-e to edit the current command line
autoload -U edit-command-line
zle -N edit-command-line
bindkey '\C-x\C-e' edit-command-line

# binding for word bound backward/forward for osx
bindkey "^[^[[C" forward-word
bindkey "^[^[[D" backward-word

# By default, zsh considers many characters part of a word (e.g., _ and -).
# Narrow that down to allow easier skipping through words via M-f and M-b.
export WORDCHARS='*?[]~&;!$%^<>'

# Highlight search results in ack.
export ACK_COLOR_MATCH='red'

# Aliases
alias ls='ls -G'
alias c='cd ~/code'
alias d="cd ~/.dotfiles"
alias g="git status"
alias ga="git add --all"
alias gc="git commit -v"
alias gca="git commit -a -v"
alias gd="git diff"
alias grc="git rebase --continue"
alias gri="git rebase -i"
alias griup="git rebase -i @{u}"
alias gpull="git pull --rebase"
alias gpush="git push origin $(git_current_branch)"
alias gm="git merge --no-ff"
alias gprune="git checkout master;git branch --merged master | grep -v 'master$' | xargs git branch -d"
alias ctags="`brew --prefix`/bin/ctags"
alias retag='ctags -R --exclude=.svn --exclude=.git --exclude=log --exclude=node_modules --exclude=test *'
alias tmux="TERM=screen-256color-bce tmux"
alias tmuxinit="TERM=screen-256color-bce tmuxp load `ls ~/.tmuxp | sed 's/.yaml//'`"
alias switch="tmux switch -t"
alias vim='nvim'
alias vimdiff='nvim -d'

#pretty json
alias json="python -mjson.tool"
#PROMPT
source ~/.zshrc.sh
PROMPT='%~$(git_super_status): '

terminate_psql_connections() {
  psql xep -c "select pg_terminate_backend(pid) from pg_stat_activity where datname='$1'"
}

if which rbenv > /dev/null; then eval "$(rbenv init -)"; fi
function rbenvsudo(){
  executable=$1
  shift 1
  sudo $(rbenv which $executable) $*
}

# FZF
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

removecontainers() {
    docker stop $(docker ps -aq)
    docker rm $(docker ps -aq)
}

# Docker
docker_purge() {
    removecontainers
    docker network prune -f
    docker rmi -f $(docker images --filter dangling=true -qa)
    docker volume rm $(docker volume ls --filter dangling=true -q)
    docker rmi -f $(docker images -qa)
}

# Antigen
source /usr/local/share/antigen/antigen.zsh

# antigen def
antigen bundle zsh-users/zsh-completions
# antigen def

antigen apply
